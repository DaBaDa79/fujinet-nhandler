
TOPIC: MAP/HPOSP0

Locations 53248 to 55295 ($D000 to
$D7FF) are for ROM for the special
I/O chips that Atari uses. The CTIA
(or GTIA, depending on which you
have) uses memory locations 53248 to
53503 ($D000 to $D0FF).  POKEY uses
53760 to 54015 ($D200 to $D2FF). PIA
uses 54016 to 54271 ($D300 to
$D3FF). ANTIC uses 54272 to 54783
($D400 to $D5FF).  ANTIC, POKEY and
G/CTIA are Large Scale Integration
(LSI) circuit chips. Don't confuse
this chip ROM with the OS ROM which
is be found in higher memory. For
the most extensive description of
these chips, see the Atari Hardware
Manual.

There are two blocks of unused,
unavailable memory in the I/O areas:
53504 to 53759 ($D100 to $D1FF) and
54784 to 55295 ($D600 to $D7FF).

Many of the following registers
can't be read directly, since they
are hardware registers. Writing to
them can often be difficult because
in most cases the registers change
every 30th second (stage two VBLANK)
or even every 60th second (stage one
VBLANK)! That's where the shadow
registers mentioned earlier come in.
The values written into these ROM
locations are drawn from the shadow
registers; to effect any "permanent"
change in BASIC (i.e., while your
program is running), you have to
write to these shadow registers (in
direct mode or while your program is
running; these values will all be
reset to their initialization state
on RESET or powerup).

Shadow register locations are
enclosed in parentheses; see these
locations for further descriptions.
If no shadow register is mentioned,
you may be able to write to the
location directly in BASIC. Machine
language is fast enough to write to
the ROM locations and may be able to
bypass the shadow registers entirely.

Another feature of many of these
registers is their dual nature. They
are read for one value and written
to for another. The differences
between these functions are noted by
the (R) for read and (W) for write
functions. You will notice that many
of these dual-purpose registers also
have two labels.

-------------------------------------
CTIA or GTIA

53248-53505    D000-D0FF

GTIA (or CTIA) is a special
television interface chip designed
exclusively for the Atari to process
the video signal. ANTIC controls
most of the C/GTIA chip functions.
The GTIA shifts the display by
one-half color clock off what the
CTIA displays, so it may display a
different color than the CTIA in the
same piece of software. However,
this shift allows players and
playfields to overlap perfectly.

There is no text window available in
GTIA modes, but you can create a
defined area on your screen with
either a DLI (see COMPUTE!,
September 1982) or by POKEing the
GTIA mode number into location 87
($57), POKEing 703 with four and
then setting the proper bits in
location 623 ($26F) for that mode.
Only in the former method will you
be able to get a readable screen,
however. In the latter you will only
create a four line, scrolling,
unreadable window. You will be able
to input and output as with any
normal text window; you just won't
be able to read it! GTIA, by the
way, apparently stands for "George's
Television Interface Adapter."
Whoever George is, thanks, but what
is CTIA?  See the OS User's Manual,
the Hardware Manual, De Re Atari and
COMPUTE!, July 1982 to September
1982, for more information.

53248          D000          HPOSP0

(W) Horizontal position of player 0.
Values from zero to 227 ($E3) are
possible but, depending on the size
of the playfield, the range can be
from 48 ($30) as the leftmost
position to 208 ($D0) as the
rightmost position. Other positions
will be "off screen." Here are the
normal screen boundaries for players
and missiles.  The values may vary
somewhat due to the nature of your
TV screen. Players and missiles may
be located outside these boundaries,
but will not be visible (off screen):

                 Top
           32 for single,
        16 for double line
             resolution
       +-------------------+
       |                   |
48 for |                   | 208 for
 both  |                   |  both
resol- |                   | resol-
utions |                   | utions
       |                   |
       +-------------------+
               Bottom
           224 for single,
         112 for double line
             resolution

Although you can POKE to these
horizontal position registers, they
are reset to zero immediately. The
player or missile will stay on the
screen at the location specified by
the POKE, but in order to move it
using the horizontal position
registers, you can't use:

POKE 53248, PEEK (53248) + n (or -n)

which will end up generating an
error message. Instead, you need to
use something like this:

10  POKE 704,220: GRAPHICS 1: HPOS = 53248: POKE 623,8
20  N = 100: POKE HPOS,N: POKE 53261,255
30  IF STICK(0) = 11 THEN N = N - 1:POKE HPOS,N: PRINT N
40  IF STICK(0) = 7 THEN N = N + 1:POKE HPOS,N: PRINT N
50  GOTO 30

There are no vertical position
registers for P/M graphics, so you
must use software routines to move
players vertically. One idea for
vertical motion is to reposition the
player within the P/M region rather
than the screen RAM. For example,
the program below uses a small
machine language routine to
accomplish this move:

1 REM LINES 5 TO 70 SET UP THE PLAYER
5 KEEP=PEEK(106)-16
10 POKE 106,KEEP:POKE 54279,KEEP
20 GRAPHICS 7+16:POKE 704,78:POKE 559,46:POKE 53277,3
30 PMBASE=KEEP*256
40 FOR LOOP=PMBASE+512 TO PMBASE+640:POKE LOOP,0:NEXT LOOP:REM CLEAR OUT MEMORY FIRST
50 X=100:Y=10:POKE 53248,X
60 FOR LOOP=0 TO 7:READ BYTE:POKE PMBASE+512+Y+LOOP,BYTE:NEXT LOOP:REM PLAYER GRAPHICS INTO MEMORY
70 DATA 129,153,189,255,255,189,153,129
80 REM LINES 100 TO 170 SET UP MACHINE LANGUAGE ROUTINE
100 DIM UP$(21),DOWN$(21):UP=ADR(UP$):DOWN=ADR(DOWN$)
110 FOR LOOP=UP TO UP+20:READ BYTE:POKE LOOP,BYTE:NEXT LOOP
120 FOR LOOP=DOWN TO DOWN+20:READ BYTE:POKE LOOP,BYTE:NEXT LOOP
130 DATA 104,104,133,204,104,133,203,160,1,177
140 DATA 203,136,145,203,200,200,192,11,208,245,96
150 DATA 104,104,133,204,104,133,203,160,10,177
160 DATA 203,200,145,203,136,136,192,255,208,245,96
200 REM VERTICAL CONTROL
210 IF STICK(0)=14 THEN GOSUB 300
220 IF STICK(0)=13 THEN D=USR(DOWN,PMBASE+511+Y):Y=Y+1
250 GOTO 210
300 U=USR(UP,PMBASE+511+Y):Y=Y-l
310 RETURN

DOWNLOAD MOVEPM.BAS

This will move any nine-line (or
less) size player vertically with
the joystick. If you have a larger
player size, increase the 11 in line
140 to a number two larger than the
number of vertical lines the player
uses, and change the ten in line 150
to one greater than the number of
lines. To add horizontal movement,
add the following lines:

6   HPOS = 53248
230 IF STICK(0) = 11 THEN X = X - 1: POKE HPOS, X
240 IF STICK(0) = 7  THEN X = X + 1: POKE HPOS, X

You can use the routine to move any
player by changing the number 511 in
the USR calls to one less than the
start address of the object to be
moved. See the appendix for a map of
P/M graphics memory use. Missiles
are more difficult to move
vertically with this routine, since
it moves an entire byte, not bits.
It would be useful for moving all
four missiles vertically if you need
to do so; they could still be moved
horizontally in an individual
manner.  See COMPUTE!, December
1981, February 1982, and May 1982,
for some solutions and some machine
language move routines, and
COMPUTE!, October 1981, for a
solution with animation involving
P/M graphics.

              M0PF

(R) Missile 0 to playfield
collision. This register will tell
you which playfield the object has
"collided" with, i.e., overlapped.
If missile 0 collides with playfield
two, the register would read four
and so on. Bit use is:

      Bit    7  6  5   4  3  2  1  0
Playfield    ...unused..  3  2  1  0
  Decimal    ...........  8  4  2  1

